'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var livekitClient = require('livekit-client');
var protobuf = require('protobufjs');

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise, SuppressedError, Symbol */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    if (typeof b !== "function" && b !== null)
        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

function sleep(ms) {
    return new Promise(function (resolve) { return setTimeout(resolve, ms); });
}
function convertFloat32ToS16PCM(float32Array) {
    var int16Array = new Int16Array(float32Array.length);
    for (var i = 0; i < float32Array.length; i++) {
        var clampedValue = Math.max(-1, Math.min(1, float32Array[i]));
        int16Array[i] = clampedValue < 0 ? clampedValue * 32768 : clampedValue * 32767;
    }
    return int16Array;
}

var options = {
	syntax: "proto3"
};
var nested = {
	pipecat: {
		nested: {
			TextFrame: {
				fields: {
					id: {
						type: "uint64",
						id: 1
					},
					name: {
						type: "string",
						id: 2
					},
					text: {
						type: "string",
						id: 3
					}
				}
			},
			AudioRawFrame: {
				fields: {
					id: {
						type: "uint64",
						id: 1
					},
					name: {
						type: "string",
						id: 2
					},
					audio: {
						type: "bytes",
						id: 3
					},
					sampleRate: {
						type: "uint32",
						id: 4
					},
					numChannels: {
						type: "uint32",
						id: 5
					}
				}
			},
			TranscriptionFrame: {
				fields: {
					id: {
						type: "uint64",
						id: 1
					},
					name: {
						type: "string",
						id: 2
					},
					text: {
						type: "string",
						id: 3
					},
					userId: {
						type: "string",
						id: 4
					},
					timestamp: {
						type: "string",
						id: 5
					}
				}
			},
			Frame: {
				oneofs: {
					frame: {
						oneof: [
							"text",
							"audio",
							"transcription"
						]
					}
				},
				fields: {
					text: {
						type: "TextFrame",
						id: 1
					},
					audio: {
						type: "AudioRawFrame",
						id: 2
					},
					transcription: {
						type: "TranscriptionFrame",
						id: 3
					}
				}
			}
		}
	}
};
var jsonDescriptor = {
	options: options,
	nested: nested
};

exports.AvatarQuality = void 0;
(function (AvatarQuality) {
    AvatarQuality["Low"] = "low";
    AvatarQuality["Medium"] = "medium";
    AvatarQuality["High"] = "high";
})(exports.AvatarQuality || (exports.AvatarQuality = {}));
exports.VoiceEmotion = void 0;
(function (VoiceEmotion) {
    VoiceEmotion["EXCITED"] = "excited";
    VoiceEmotion["SERIOUS"] = "serious";
    VoiceEmotion["FRIENDLY"] = "friendly";
    VoiceEmotion["SOOTHING"] = "soothing";
    VoiceEmotion["BROADCASTER"] = "broadcaster";
})(exports.VoiceEmotion || (exports.VoiceEmotion = {}));
exports.TaskType = void 0;
(function (TaskType) {
    TaskType["TALK"] = "talk";
    TaskType["REPEAT"] = "repeat";
})(exports.TaskType || (exports.TaskType = {}));
exports.TaskMode = void 0;
(function (TaskMode) {
    TaskMode["SYNC"] = "sync";
    TaskMode["ASYNC"] = "async";
})(exports.TaskMode || (exports.TaskMode = {}));
// event types --------------------------------
exports.StreamingEvents = void 0;
(function (StreamingEvents) {
    StreamingEvents["AVATAR_START_TALKING"] = "avatar_start_talking";
    StreamingEvents["AVATAR_STOP_TALKING"] = "avatar_stop_talking";
    StreamingEvents["AVATAR_TALKING_MESSAGE"] = "avatar_talking_message";
    StreamingEvents["AVATAR_END_MESSAGE"] = "avatar_end_message";
    StreamingEvents["USER_TALKING_MESSAGE"] = "user_talking_message";
    StreamingEvents["USER_END_MESSAGE"] = "user_end_message";
    StreamingEvents["USER_START"] = "user_start";
    StreamingEvents["USER_STOP"] = "user_stop";
    StreamingEvents["USER_SILENCE"] = "user_silence";
    StreamingEvents["STREAM_READY"] = "stream_ready";
    StreamingEvents["STREAM_DISCONNECTED"] = "stream_disconnected";
})(exports.StreamingEvents || (exports.StreamingEvents = {}));
var APIError = /** @class */ (function (_super) {
    __extends(APIError, _super);
    function APIError(message, status, responseText) {
        var _this = _super.call(this, message) || this;
        _this.name = 'APIError';
        _this.status = status;
        _this.responseText = responseText;
        return _this;
    }
    return APIError;
}(Error));
var StreamingAvatar = /** @class */ (function () {
    function StreamingAvatar(_a) {
        var token = _a.token, _b = _a.basePath, basePath = _b === void 0 ? "https://api.heygen.com" : _b;
        this.room = null;
        this.mediaStream = null;
        this.eventTarget = new EventTarget();
        this.audioContext = null;
        this.webSocket = null;
        this.scriptProcessor = null;
        this.mediaStreamAudioSource = null;
        this.mediaDevicesStream = null;
        this.sessionId = null;
        this.token = token;
        this.basePath = basePath;
    }
    StreamingAvatar.prototype.createStartAvatar = function (requestData) {
        return __awaiter(this, void 0, void 0, function () {
            var sessionInfo, room, mediaStream;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.newSession(requestData)];
                    case 1:
                        sessionInfo = _a.sent();
                        this.sessionId = sessionInfo.session_id;
                        this.language = requestData.language;
                        room = new livekitClient.Room({
                            adaptiveStream: true,
                            dynacast: true,
                            videoCaptureDefaults: {
                                resolution: livekitClient.VideoPresets.h720.resolution,
                            },
                        });
                        this.room = room;
                        this.mediaStream = null;
                        room.on(livekitClient.RoomEvent.DataReceived, function (roomMessage) {
                            var eventMsg = null;
                            try {
                                var messageString = new TextDecoder().decode(roomMessage);
                                eventMsg = JSON.parse(messageString);
                            }
                            catch (e) {
                                console.error(e);
                            }
                            if (!eventMsg) {
                                return;
                            }
                            _this.emit(eventMsg.type, eventMsg);
                        });
                        mediaStream = new MediaStream();
                        room.on(livekitClient.RoomEvent.TrackSubscribed, function (track) {
                            if (track.kind === "video" || track.kind === "audio") {
                                mediaStream.addTrack(track.mediaStreamTrack);
                                var hasVideoTrack = mediaStream.getVideoTracks().length > 0;
                                var hasAudioTrack = mediaStream.getAudioTracks().length > 0;
                                if (hasVideoTrack &&
                                    hasAudioTrack &&
                                    !_this.mediaStream) {
                                    _this.mediaStream = mediaStream;
                                    _this.emit(exports.StreamingEvents.STREAM_READY, _this.mediaStream);
                                }
                            }
                        });
                        room.on(livekitClient.RoomEvent.TrackUnsubscribed, function (track) {
                            var mediaTrack = track.mediaStreamTrack;
                            if (mediaTrack) {
                                mediaStream.removeTrack(mediaTrack);
                            }
                        });
                        room.on(livekitClient.RoomEvent.Disconnected, function (reason) {
                            _this.emit(exports.StreamingEvents.STREAM_DISCONNECTED, reason);
                        });
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, room.prepareConnection(sessionInfo.url, sessionInfo.access_token)];
                    case 3:
                        _a.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        _a.sent();
                        return [3 /*break*/, 5];
                    case 5: return [4 /*yield*/, this.startSession()];
                    case 6:
                        _a.sent();
                        return [4 /*yield*/, room.connect(sessionInfo.url, sessionInfo.access_token)];
                    case 7:
                        _a.sent();
                        return [2 /*return*/, sessionInfo];
                }
            });
        });
    };
    StreamingAvatar.prototype.startVoiceChat = function () {
        return __awaiter(this, arguments, void 0, function (requestData) {
            var devicesStream, e_1;
            var _this = this;
            var _a, _b, _c;
            if (requestData === void 0) { requestData = {}; }
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        requestData.useSilencePrompt = requestData.useSilencePrompt || false;
                        if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
                            return [2 /*return*/];
                        }
                        _d.label = 1;
                    case 1:
                        _d.trys.push([1, 6, , 7]);
                        return [4 /*yield*/, this.loadAudioRawFrame()];
                    case 2:
                        _d.sent();
                        return [4 /*yield*/, this.connectWebSocket({ useSilencePrompt: requestData.useSilencePrompt })];
                    case 3:
                        _d.sent();
                        this.audioContext = new window.AudioContext({
                            latencyHint: 'interactive',
                            sampleRate: 16000,
                        });
                        return [4 /*yield*/, navigator.mediaDevices.getUserMedia({
                                audio: {
                                    sampleRate: 16000,
                                    channelCount: 1,
                                    autoGainControl: true,
                                    echoCancellation: true,
                                    noiseSuppression: true,
                                },
                            })];
                    case 4:
                        devicesStream = _d.sent();
                        this.mediaDevicesStream = devicesStream;
                        this.mediaStreamAudioSource = (_a = this.audioContext) === null || _a === void 0 ? void 0 : _a.createMediaStreamSource(devicesStream);
                        this.scriptProcessor = (_b = this.audioContext) === null || _b === void 0 ? void 0 : _b.createScriptProcessor(512, 1, 1);
                        this.mediaStreamAudioSource.connect(this.scriptProcessor);
                        this.scriptProcessor.connect((_c = this.audioContext) === null || _c === void 0 ? void 0 : _c.destination);
                        this.scriptProcessor.onaudioprocess = function (event) {
                            var _a, _b, _c;
                            if (!_this.webSocket) {
                                return;
                            }
                            var audioData = event.inputBuffer.getChannelData(0);
                            var pcmS16Array = convertFloat32ToS16PCM(audioData);
                            var pcmByteArray = new Uint8Array(pcmS16Array.buffer);
                            var frame = (_a = _this.audioRawFrame) === null || _a === void 0 ? void 0 : _a.create({
                                audio: {
                                    audio: Array.from(pcmByteArray),
                                    sampleRate: 16000,
                                    numChannels: 1,
                                },
                            });
                            var encodedFrame = new Uint8Array((_b = _this.audioRawFrame) === null || _b === void 0 ? void 0 : _b.encode(frame).finish());
                            (_c = _this.webSocket) === null || _c === void 0 ? void 0 : _c.send(encodedFrame);
                        };
                        // though room has been connected, but the stream may not be ready.
                        return [4 /*yield*/, sleep(2000)];
                    case 5:
                        // though room has been connected, but the stream may not be ready.
                        _d.sent();
                        return [3 /*break*/, 7];
                    case 6:
                        e_1 = _d.sent();
                        console.error(e_1);
                        throw e_1;
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    StreamingAvatar.prototype.closeVoiceChat = function () {
        var _a, _b;
        try {
            if (this.audioContext) {
                this.audioContext = null;
            }
            if (this.scriptProcessor) {
                this.scriptProcessor.disconnect();
                this.scriptProcessor = null;
            }
            if (this.mediaStreamAudioSource) {
                this.mediaStreamAudioSource.disconnect();
                this.mediaStreamAudioSource = null;
            }
            if (this.mediaDevicesStream) {
                (_b = (_a = this.mediaDevicesStream) === null || _a === void 0 ? void 0 : _a.getTracks()) === null || _b === void 0 ? void 0 : _b.forEach(function (track) { return track.stop(); });
                this.mediaDevicesStream = null;
            }
            if (this.webSocket) {
                this.webSocket.close();
            }
        }
        catch (e) { }
    };
    StreamingAvatar.prototype.newSession = function (requestData) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, _c;
            return __generator(this, function (_d) {
                return [2 /*return*/, this.request("/v1/streaming.new", {
                        avatar_name: requestData.avatarName,
                        quality: requestData.quality,
                        knowledge_base_id: requestData.knowledgeId,
                        knowledge_base: requestData.knowledgeBase,
                        voice: {
                            voice_id: (_a = requestData.voice) === null || _a === void 0 ? void 0 : _a.voiceId,
                            rate: (_b = requestData.voice) === null || _b === void 0 ? void 0 : _b.rate,
                            emotion: (_c = requestData.voice) === null || _c === void 0 ? void 0 : _c.emotion,
                        },
                        language: requestData.language,
                        version: "v2",
                        video_encoding: "H264",
                        source: 'sdk',
                        disable_idle_timeout: requestData.disableIdleTimeout,
                    })];
            });
        });
    };
    StreamingAvatar.prototype.startSession = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.request("/v1/streaming.start", {
                        session_id: this.sessionId,
                    })];
            });
        });
    };
    StreamingAvatar.prototype.speak = function (requestData) {
        return __awaiter(this, void 0, void 0, function () {
            var frame, encodedFrame;
            var _a, _b, _c;
            return __generator(this, function (_d) {
                requestData.taskType = requestData.taskType || requestData.task_type || exports.TaskType.TALK;
                requestData.taskMode = requestData.taskMode || exports.TaskMode.ASYNC;
                // try to use websocket first
                // only support talk task
                if (this.webSocket && this.audioRawFrame && requestData.task_type === exports.TaskType.TALK && requestData.taskMode !== exports.TaskMode.SYNC) {
                    frame = (_a = this.audioRawFrame) === null || _a === void 0 ? void 0 : _a.create({
                        text: {
                            text: requestData.text,
                        },
                    });
                    encodedFrame = new Uint8Array((_b = this.audioRawFrame) === null || _b === void 0 ? void 0 : _b.encode(frame).finish());
                    (_c = this.webSocket) === null || _c === void 0 ? void 0 : _c.send(encodedFrame);
                    return [2 /*return*/];
                }
                return [2 /*return*/, this.request("/v1/streaming.task", {
                        text: requestData.text,
                        session_id: this.sessionId,
                        task_mode: requestData.taskMode,
                        task_type: requestData.taskType,
                    })];
            });
        });
    };
    StreamingAvatar.prototype.startListening = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.request("/v1/streaming.start_listening", {
                        session_id: this.sessionId,
                    })];
            });
        });
    };
    StreamingAvatar.prototype.stopListening = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.request("/v1/streaming.stop_listening", {
                        session_id: this.sessionId,
                    })];
            });
        });
    };
    StreamingAvatar.prototype.interrupt = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.request("/v1/streaming.interrupt", {
                        session_id: this.sessionId,
                    })];
            });
        });
    };
    StreamingAvatar.prototype.stopAvatar = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                // clear some resources
                this.closeVoiceChat();
                return [2 /*return*/, this.request("/v1/streaming.stop", {
                        session_id: this.sessionId,
                    })];
            });
        });
    };
    StreamingAvatar.prototype.on = function (eventType, listener) {
        this.eventTarget.addEventListener(eventType, listener);
        return this;
    };
    StreamingAvatar.prototype.off = function (eventType, listener) {
        this.eventTarget.removeEventListener(eventType, listener);
        return this;
    };
    StreamingAvatar.prototype.request = function (path, params, config) {
        return __awaiter(this, void 0, void 0, function () {
            var response, errorText, jsonData, error_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 5, , 6]);
                        return [4 /*yield*/, fetch(this.getRequestUrl(path), {
                                method: "POST",
                                headers: {
                                    Authorization: "Bearer ".concat(this.token),
                                    "Content-Type": "application/json",
                                },
                                body: JSON.stringify(params),
                            })];
                    case 1:
                        response = _a.sent();
                        if (!!response.ok) return [3 /*break*/, 3];
                        return [4 /*yield*/, response.text()];
                    case 2:
                        errorText = _a.sent();
                        throw new APIError("API request failed with status ".concat(response.status), response.status, errorText);
                    case 3: return [4 /*yield*/, response.json()];
                    case 4:
                        jsonData = _a.sent();
                        return [2 /*return*/, jsonData.data];
                    case 5:
                        error_2 = _a.sent();
                        throw error_2;
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    StreamingAvatar.prototype.emit = function (eventType, detail) {
        var event = new CustomEvent(eventType, { detail: detail });
        this.eventTarget.dispatchEvent(event);
    };
    StreamingAvatar.prototype.getRequestUrl = function (endpoint) {
        return "".concat(this.basePath).concat(endpoint);
    };
    StreamingAvatar.prototype.connectWebSocket = function (requestData) {
        return __awaiter(this, void 0, void 0, function () {
            var websocketUrl;
            var _this = this;
            return __generator(this, function (_a) {
                websocketUrl = "wss://".concat(new URL(this.basePath).hostname, "/v1/ws/streaming.chat?session_id=").concat(this.sessionId, "&session_token=").concat(this.token, "&silence_response=").concat(requestData.useSilencePrompt);
                if (this.language) {
                    websocketUrl += "&stt_language=".concat(this.language);
                }
                this.webSocket = new WebSocket(websocketUrl);
                this.webSocket.addEventListener('message', function (event) {
                    var eventData = null;
                    try {
                        eventData = JSON.parse(event.data);
                    }
                    catch (e) {
                        console.error(e);
                        return;
                    }
                    _this.emit(eventData.event_type, eventData);
                });
                this.webSocket.addEventListener('close', function (event) {
                    _this.webSocket = null;
                });
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        var _a, _b;
                        (_a = _this.webSocket) === null || _a === void 0 ? void 0 : _a.addEventListener('error', function (event) {
                            _this.webSocket = null;
                            reject(event);
                        });
                        (_b = _this.webSocket) === null || _b === void 0 ? void 0 : _b.addEventListener('open', function () {
                            resolve(true);
                        });
                    })];
            });
        });
    };
    StreamingAvatar.prototype.loadAudioRawFrame = function () {
        return __awaiter(this, void 0, void 0, function () {
            var root;
            return __generator(this, function (_a) {
                if (!this.audioRawFrame) {
                    root = protobuf.Root.fromJSON(jsonDescriptor);
                    this.audioRawFrame = root === null || root === void 0 ? void 0 : root.lookupType('pipecat.Frame');
                }
                return [2 /*return*/];
            });
        });
    };
    return StreamingAvatar;
}());

exports.default = StreamingAvatar;
